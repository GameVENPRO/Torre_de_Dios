import logging
from contextlib import suppress
from random import choice, randint, uniform

from aiogram.dispatcher import FSMContext
from aiogram.types import (CallbackQuery, KeyboardButton, Message,
                           ReplyKeyboardMarkup)
from aiogram.types.chat import ChatActions
from aiogram.utils.exceptions import MessageToDeleteNotFound
from sqlalchemy import and_

from app.__main__ import bot

from ..database.base import Item, User
from ..helpers.dev_text import lvl_up_text, meet_enemy_text, rankup_text
from ..helpers.keyboards import (ATTACK_Kb, CONFIRM_BATTLE_Kb, DEFENCE_Kb,
                                 IDLE_Kb, PROFILE_Kb, PVE_LEAVE_Kb,
                                 STATS_INC_Kb)
from ..helpers.scenario import MOB_NAMES
from ..models.enemies import Enemy
from ..utils.game_logic import (battle_attack, battle_defence, exam_choose,
                                get_xp, item_drop, power, round_down,
                                set_difficulty, enemy_calc)
from ..utils.states import MainStates


async def pve_rankup(m: Message, state: FSMContext, user: User):
    if user.health > 0:
        await MainStates.battle.set()
        await m.reply('‚è≥ <i>–ë–∞—à–Ω—è –≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞..</i>',
                      reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('~')))
        await ChatActions().typing(sleep=randint(1, 5))
        async with state.proxy() as data:
            data['enemy'] = exam_choose(user)
            if data['enemy'] != '‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥!':
                diff = set_difficulty(data['enemy'].power, power(user))
                await m.answer(text=rankup_text(data['enemy'], user, diff), reply_markup=CONFIRM_BATTLE_Kb())
            else:
                await m.answer(text=data['enemy'], reply_markup=IDLE_Kb())
    else:
        await m.answer(text="‚ùó –¢—ã –º—ë—Ä—Ç–≤...")


async def pve_battle(m: Message, state: FSMContext, user: User):
    if user.health > 0:
        await MainStates.battle.set()
        await m.reply('‚è≥ <i>–ë–∞—à–Ω—è –∏—â–µ—Ç –≤–∞–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞..</i>',
                      reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('~')))
        await ChatActions().typing(sleep=randint(1, 5))
        raw_enemy = enemy_calc(user.damage, user.health, user.defence, user.lvl)
        async with state.proxy() as data:
            enemy = Enemy(name=choice(MOB_NAMES), damage=raw_enemy[0][0], health=raw_enemy[0][1], defence=raw_enemy[0][2], 
                          drop_chance=randint(1, 15), bonus=raw_enemy[1])
            data['enemy'] = enemy
            try:
                await m.answer(text=meet_enemy_text(data['enemy'], set_difficulty(power(data['enemy']), power(user))),
                               reply_markup=CONFIRM_BATTLE_Kb())
            except TypeError:
                await state.reset_state()
                await state.set_data({'enemy': {}})
                await m.answer(f'NO SUCH RANK | –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π', reply_markup=IDLE_Kb())
    else:
        await m.answer(text="‚ùó –¢—ã –º—ë—Ä—Ç–≤...")


async def pve_confirmed(c: CallbackQuery, state: FSMContext):
    with suppress(MessageToDeleteNotFound):
        await c.message.delete()
    await c.message.answer('‚è≥ <i>–ë–∞—à–Ω—è –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–ª–µ –±–æ—è..</i>', reply_markup=PVE_LEAVE_Kb())
    await ChatActions().typing(sleep=randint(1, 5))
    bot_msg = await c.message.answer(text="‚ùï –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –∑–∞—â–∏—Ç—ã:", reply_markup=DEFENCE_Kb())
    await state.update_data({'bot_message_id': bot_msg.message_id})


async def pve_attack(c: CallbackQuery, state: FSMContext, user: User):
    with suppress(MessageToDeleteNotFound):
        await c.message.delete()
    async with state.proxy() as data:
        try: enemy = data['enemy']
        except KeyError: enemy = None
    if enemy:
        pre_health, pre_defence = enemy.health, enemy.defence
        enemy.health, enemy.defence = await battle_attack(0, randint(0, 3), user, enemy, call=c)
        await c.message.answer(text=f"üó° \"{enemy.name}\" <b>‚ô•:{enemy.health}</b>(-{pre_health-enemy.health}) <b>|</b> "
                                    f"üõ°:<b>{enemy.defence}</b>(-{pre_defence-enemy.defence})")
        if enemy.health > 0:
            bot_msg = await c.message.answer(text="‚ùï –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –∑–∞—â–∏—Ç—ã:", reply_markup=DEFENCE_Kb())
            await state.update_data({'bot_message_id': bot_msg.message_id})
            await state.update_data({'enemy': enemy})
        else:
            try:
                if hasattr(enemy, 'bonus'):
                    await c.answer("‚ò†Ô∏è –í—Ä–∞–≥ —É–º–µ—Ä")
                    total_xp = get_xp(user.lvl)
                    try:
                        if user.xp + enemy.bonus >= total_xp:
                            lvl_increase = (user.xp + enemy.bonus) // total_xp
                            user.level_points += 3 * lvl_increase
                            await user.update(level_points=user.level_points, 
                                              xp=user.xp+enemy.bonus, 
                                              lvl=user.lvl+lvl_increase).apply()
                            await c.message.answer(
                                text=f"üéä –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{enemy.bonus}<i>XP</i>, –∏ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!\n"
                                     f"<i>–í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ (3) –æ—á–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è.</i>", reply_markup=PROFILE_Kb())
                        else:
                            await user.update(health=user.health, defence=user.defence, xp=user.xp+enemy.bonus).apply()
                            await c.message.answer(text=f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{enemy.bonus} <i>XP</i>!",
                                                   reply_markup=IDLE_Kb())
                    finally:
                        await user.update(balance=user.balance + enemy.bonus // 2).apply()
                        await c.message.answer(text=f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{enemy.bonus // 2} <i>–ºo–Ω–µ—Ç</i>!")
                        if item_drop(enemy.drop_chance) is True:
                            drop_list = await Item.query.where(and_(Item.rank == user.rank, Item.quality == 'Common')).gino.all()
                            if drop_list:
                                dropped_item = choice(drop_list)
                                user.inventory.append(dropped_item.id)
                                await user.update(inventory=user.inventory).apply()
                                await c.message.answer(f"‚ùó –í–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç: \n\"{dropped_item.name}\".\n"
                                                       f"<i>–ü—Ä–µ–¥–º–µ—Ç –ø–æ–º–µ—â—ë–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</i>")
                            else:
                                print('NO SUCH ITEMS ON THIS RANK')
                else:
                    await user.update(rank=enemy.rank, level_points=user.level_points+5).apply()
                    await c.message.answer(
                        f"üéä –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤–∞—à —Ä–∞–Ω–≥ - {enemy.rank}. "
                        f"<i>–í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ (5) –æ—á–∫–æ–≤ –ø–æ–≤—ã—à–µ–Ω–∏—è.</i>", reply_markup=STATS_INC_Kb())
            finally:
                await state.reset_state()
                await state.reset_data()
    else:
        await state.reset_state()
        await c.message.answer("‚ùó –î–∞–Ω–Ω—ã–π –±–æ–π –ø–æ—Ç–µ—Ä—è–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=IDLE_Kb())


async def pve_defence(c: CallbackQuery, state: FSMContext, user: User):
    with suppress(MessageToDeleteNotFound):
        await c.message.delete()
    async with state.proxy() as data:
        try: enemy = data['enemy']
        except KeyError: enemy = None
    if enemy:
        pre_health, pre_defence = user.health, user.defence
        user.health, user.defence = await battle_defence(0, randint(0, 3), user, enemy, call=c)
        await c.message.answer(text=f"üó° \"{c.from_user.first_name}\" <b>‚ô•:{user.health}</b>(-{pre_health-user.health}) <b>|</b> "
                                    f"üõ°:<b>{user.defence}</b>(-{pre_defence-user.defence})")
        if user.health > 0:
            await user.update(health=user.health, defence=user.defence).apply()
            bot_msg = await c.message.answer(text="‚ùï –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –∞—Ç–∞–∫–∏:", reply_markup=ATTACK_Kb())
            await state.update_data({'bot_message_id': bot_msg.message_id})
        else:
            try:
                if hasattr(enemy, 'bonus'):
                    await user.update(health=1, defence=0, xp=user.xp - enemy.bonus if user.xp - enemy.bonus > 0 else -1, 
                                      balance=user.balance - enemy.bonus // 2 if user.balance - enemy.bonus // 2 > 0 else -1).apply()
                    await c.message.answer(
                        text="‚ò†Ô∏è –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø–æ—Ç–µ—Ä—è–ª –æ–ø—ã—Ç –∏ –¥–µ–Ω—å–≥–∏, –∞ –µ—â—ë —É —Ç–µ–±—è 1 —Ö–ø! –ù–µ —Å–¥–∞–≤–∞–π—Å—è!",
                        reply_markup=IDLE_Kb())
                    logging.info(f"{c.from_user.first_name} —É–º–µ—Ä")
                else:
                    await user.update(health=1, defence=0).apply()
                    await c.message.answer(text="‚ùó –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω!", reply_markup=IDLE_Kb())
                    logging.info(f"{c.from_user.first_name} –ø—Ä–æ–≤–∞–ª–∏–ª —ç–∫–∑–∞–º–µ–Ω")
            finally:
                await state.reset_state()
                await state.reset_data()
    else:
        await state.reset_state()
        await c.message.answer("‚ùó –î–∞–Ω–Ω—ã–π –±–æ–π –ø–æ—Ç–µ—Ä—è–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=IDLE_Kb())


async def pve_leave_battle(m: Message, state: FSMContext, user: User):
    async with state.proxy() as data:
        enemy = data['enemy']
    try:
        with suppress(MessageToDeleteNotFound):
            await bot.delete_message(chat_id=m.chat.id, message_id=data['bot_message_id'])
        await user.update(xp=user.xp - enemy.bonus // 2 if user.xp - enemy.bonus // 2 > 0 else -1).apply()
        await m.answer(
            text=f"‚ò†Ô∏è <i>–ë–∞—à–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —Ç–≤–æ—ë –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n –û–ø—ã—Ç –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ {enemy.bonus // 2}XP</i>",
            reply_markup=IDLE_Kb())
        logging.info(f"{m.from_user.first_name} —Å–¥–∞–ª—Å—è")
    except KeyError:
        return
    finally:
        await state.reset_state()
        await state.reset_data()
